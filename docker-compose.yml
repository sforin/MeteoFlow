services:
  zookeeper:
    image: bitnami/zookeeper:3.7
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 5s
      timeout: 60s
      retries: 120

  kafka:
    restart: always
    image: bitnami/kafka:3.9.0
    container_name: kafka
    depends_on:
      zookeeper:
          condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      start_period: 15s
      interval: 5s
      timeout: 60s
      retries: 120

  kafdrop:
    restart: always
    image: obsidiandynamics/kafdrop:4.1.0
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: meteo_user
      POSTGRES_PASSWORD: meteo_password
      POSTGRES_DB: meteo_data
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U meteo_user -d meteo_data"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@meteo.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy


  api:
    build:
      context: .
      dockerfile: app/docker/api.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: meteo_data
      POSTGRES_USER: meteo_user
      POSTGRES_PASSWORD: meteo_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_API_KEY_ENABLED=true
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - grafana-storage:/var/lib/grafana


  producer-01:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-01
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-01.yml
    volumes:
      - ./data:/app/data

  producer-02:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-02
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-02.yml
    volumes:
      - ./data:/app/data

  producer-03:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-03
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-03.yml
    volumes:
      - ./data:/app/data

  producer-04:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-04
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-04.yml
    volumes:
      - ./data:/app/data

  producer-05:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-05
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-05.yml
    volumes:
      - ./data:/app/data

  producer-06:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-06
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-06.yml
    volumes:
      - ./data:/app/data

  producer-07:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-07
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-07.yml
    volumes:
      - ./data:/app/data

  producer-08:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-08
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-08.yml
    volumes:
      - ./data:/app/data

  producer-09:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-09
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-09.yml
    volumes:
      - ./data:/app/data

  producer-10:
    build:
      context: .
      dockerfile: app/docker/producer.Dockerfile
    container_name: meteo_producer-10
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - STATION_CONFIG=config/alp-10.yml
    volumes:
      - ./data:/app/data

  consumer:
    build:
      context: .
      dockerfile: app/docker/consumer.Dockerfile
    container_name: meteo_consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - CONFIG_FILE=config/meteo_payload.yml
    volumes:
      - ./data:/app/data


volumes:
  pgdata:
  pgadmin_data:
  grafana-storage:
